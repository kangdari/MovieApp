{"version":3,"sources":["Components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","Components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","genre","MoviePoster","poster","alt","src","title","Movie","id","genres","summary","className","to","pathname","state","map","index","key","length","slice","Home","useState","movies","setMovies","callApi","a","axios","get","response","movieSet","data","useEffect","movie","medium_cover_image","renderMovies","About","props","Detail","location","history","undefined","push","Navigation","App","component","path","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0UAMMA,G,YAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OAAO,8BAAOA,KAGZC,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IAC3B,OAAO,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,KAuE/BG,EApED,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,GAAIF,EAAqC,EAArCA,MAAOH,EAA8B,EAA9BA,OAAQM,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACxC,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIC,GAAI,CACAC,SAAS,UAAD,OAAYL,GACpBM,MAAO,CACHR,QACAH,SACAM,SACAC,aAIR,kBAAC,EAAD,CAAaP,OAAQA,EAAQC,IAAKE,IAClC,yBAAKK,UAAU,iBACX,4BAAKL,GACL,yBAAKK,UAAU,eACVF,EAAOM,KAAI,SAACd,EAAOe,GAAR,OACR,kBAAC,EAAD,CAAYf,MAAOA,EAAOgB,IAAKD,QAGvC,uBAAGL,UAAU,WACRD,EAAQQ,OAAS,IAAjB,UACQR,EAAQS,MAAM,EAAG,KADzB,OAEKT,O,iBCwBfU,MAzDf,WAAiB,IAAD,EACgBC,mBAAS,MADzB,mBACLC,EADK,KACGC,EADH,KAMNC,EAAO,uCAAG,8BAAAC,EAAA,sEACWC,IAAMC,IALrB,sEAII,OACNC,EADM,OAENC,EAAWD,EAASE,KAAKA,KAAKR,OACpCC,EAAUM,GAHE,2CAAH,qDA0Cb,OArBAE,qBAAU,WACNP,MAED,IAmBC,yBAAKb,UAAU,aACX,yBAAKA,UAAYW,EAAqB,aAAZ,WACpBA,EAlBO,SAAAA,GAajB,OAZmBA,EAAOP,KAAI,SAAAiB,GAC1B,OACI,kBAAC,EAAD,CACIf,IAAKe,EAAMxB,GACXA,GAAIwB,EAAMxB,GACVF,MAAO0B,EAAM1B,MACbH,OAAQ6B,EAAMC,mBACdxB,OAAQuB,EAAMvB,OACdC,QAASsB,EAAMtB,aASIwB,CAAaZ,GAAzB,aC/CZa,EARD,SAACC,GACX,OACI,2CCeOC,EAjBA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACxB,QAAuBC,IAAnBF,EAASxB,MAET,OADAyB,EAAQE,KAAK,KACN,KAH2B,MAKKH,EAASxB,MAA5CR,EAL8B,EAK9BA,MAAOH,EALuB,EAKvBA,OAAQM,EALe,EAKfA,OAAQC,EALO,EAKPA,QAE/B,OACI,6BACKJ,EACAH,EACAM,EACAC,ICDEgC,EATI,WACf,OACI,6BACI,kBAAC,IAAD,CAAM9B,GAAG,KAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCaG+B,G,MAbH,WACR,OACI,yBAAKhC,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOiC,UAAWxB,EAAMyB,KAAK,IAAIC,OAAK,IACtC,kBAAC,IAAD,CAAOF,UAAWT,EAAOU,KAAK,WAC9B,kBAAC,IAAD,CAAOD,UAAWP,EAAQQ,KAAK,mBCH3BE,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.841a176d.chunk.js","sourcesContent":["import React from 'react';\r\n//import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MovieGenre = ({ genre }) => {\r\n    return <span>{genre}</span>;\r\n};\r\n\r\nconst MoviePoster = ({ poster, alt }) => {\r\n    return <img src={poster} alt={alt} title={alt} />;\r\n};\r\n\r\nconst Movie = ({ id, title, poster, genres, summary }) => {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <Link\r\n                to={{\r\n                    pathname: `/movie/${id}`,\r\n                    state: {\r\n                        title,\r\n                        poster,\r\n                        genres,\r\n                        summary,\r\n                    },\r\n                }}\r\n            >\r\n                <MoviePoster poster={poster} alt={title} />\r\n                <div className=\"MovieContents\">\r\n                    <h2>{title}</h2>\r\n                    <div className=\"MovieGenres\">\r\n                        {genres.map((genre, index) => (\r\n                            <MovieGenre genre={genre} key={index} />\r\n                        ))}\r\n                    </div>\r\n                    <p className=\"summary\">\r\n                        {summary.length > 250\r\n                            ? `${summary.slice(0, 250)}...`\r\n                            : summary}\r\n                    </p>\r\n                    {/* <p>{summary.length > 20 ? summary.slice(0, 20) : summary}</p> */}\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\n// const MovieBlock = styled.div`\r\n//     margin-top: 4rem;\r\n// `;\r\n\r\n// const MovieConent = styled.div``;\r\n\r\n// const Movie = ({ title, poster, genres, summary, rating }) => {\r\n//     return (\r\n//         <MovieBlock>\r\n//             <MoviePoster poster={poster} alt={title} />\r\n//             <MovieConent>\r\n//                 <h1>{title}</h1>\r\n//                 {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n//                 <p>{summary}</p>\r\n//                 <p>{rating}</p>\r\n//             </MovieConent>\r\n//         </MovieBlock>\r\n//     );\r\n// };\r\n\r\n// props 속성 관리\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n};\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n};\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired,\r\n};\r\nexport default Movie;\r\n","import React, { useState, useEffect } from 'react';\r\n// import { useCallback } from 'react';\r\nimport './Home.css';\r\nimport Movie from '../Components/Movie';\r\nimport axios from 'axios';\r\n\r\nfunction Home() {\r\n    const [movies, setMovies] = useState(null);\r\n    const url = 'https://yts.mx/api/v2/list_movies.json?sort_by=like_count&limit=10';\r\n    // const url = 'https://yts.mx/api/v2/list_movies.json?sort_by=like_count&limit=10&page=1';\r\n\r\n    // 1. axios를 이용한 API 호출\r\n    const callApi = async () => {\r\n        const response = await axios.get(url);\r\n        const movieSet = response.data.data.movies;\r\n        setMovies(movieSet);\r\n    };\r\n\r\n    // 2. Promise를 이용한 API 호출\r\n    // useCallback으로 감싸주지 않으면 렌더링할 때마다 getMovies 함수가 생성됨.\r\n    // [] 렌더링될 때 한번만 실행\r\n    // const getMovies = useCallback(async () => {\r\n    //     const movies = await APIcall();\r\n    //     setMovies(movies);\r\n    // }, []);\r\n\r\n    // const APIcall = () => {\r\n    //     return fetch(url)\r\n    //         .then(response => response.json())\r\n    //         .then(response => response.data.movies)\r\n    //         .catch(err => console.log(err));\r\n    // };\r\n\r\n    useEffect(() => {\r\n        callApi(); // 1\r\n        // getMovies(); // 2\r\n    }, []);\r\n\r\n    // titile, genres, rating, summary, medium_cover_image\r\n    const renderMovies = movies => {\r\n        const moviesList = movies.map(movie => {\r\n            return (\r\n                <Movie\r\n                    key={movie.id}\r\n                    id={movie.id}\r\n                    title={movie.title}\r\n                    poster={movie.medium_cover_image}\r\n                    genres={movie.genres}\r\n                    summary={movie.summary}\r\n                />\r\n            );\r\n        });\r\n        return moviesList;\r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={!movies ? 'Loading' : 'MovieBlock'}>\r\n                {!movies ? 'Loading' : renderMovies(movies)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst About = (props) => {\r\n    return (\r\n        <div>\r\n            something\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import React from 'react';\r\n\r\nconst Detail = ({ location, history }) => {\r\n    if (location.state === undefined){\r\n        history.push('/'); // redirect\r\n        return null ; \r\n    }\r\n    const { title, poster, genres, summary } = location.state;\r\n    \r\n    return (\r\n        <div>\r\n            {title}\r\n            {poster}\r\n            {genres}\r\n            {summary}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <div>\r\n            <Link to=\"/\">Home  </Link>\r\n            <Link to=\"/about\">About</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Home from './routes/Home';\nimport About from './routes/About';\nimport Detail from './routes/Detail';\nimport Navigation from './Components/Navigation';\nimport './App.css';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Navigation />\n                <Route component={Home} path=\"/\" exact />\n                <Route component={About} path=\"/About\" />\n                <Route component={Detail} path=\"/movie/:id\" />\n            </HashRouter>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />,document.getElementById('root'),);\nserviceWorker.unregister();\n"],"sourceRoot":""}